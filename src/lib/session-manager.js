// lib/session-manager.js - VERSION OPTIMIS√âE CONNECTIVIT√â
import { supabase } from './supabase';

class SessionManager {
  constructor() {
    if (SessionManager.instance) {
      return SessionManager.instance;
    }
    
    SessionManager.instance = this;
    
    this.refreshTimer = null;
    this.isRefreshing = false;
    this.isInitialized = false;
    this.initializationPromise = null;
    this.currentSession = null;
    this.listeners = new Set();

    this.handleVisibilityChange = this._handleVisibilityChange.bind(this);
    
    // Configuration optimis√©e pour connectivit√© difficile
    this.REFRESH_MARGIN = 15 * 60 * 1000; // 15 min avant expiration (tr√®s conservateur)
    this.MIN_REFRESH_INTERVAL = 5 * 60 * 1000; // 5 min minimum entre tentatives
    this.CHECK_INTERVAL = 10 * 60 * 1000; // V√©rifier toutes les 10 minutes (tr√®s espac√©)
    this.SESSION_TIMEOUT = 60 * 1000; // 60 secondes de timeout (plus long)
    this.MAX_RETRIES = 2; // Maximum 2 tentatives
    this.RETRY_DELAY = 5000; // 5 secondes entre retry
    
    this.lastRefreshTime = 0;
    this.consecutiveErrors = 0;
    this.maxConsecutiveErrors = 2;
    this.isInErrorState = false;
    this.connectionQuality = 'unknown';
    
    console.log('[SessionManager] üîß VERSION OPTIMIS√âE - Connectivit√© difficile');
  }

  // Test de connectivit√© avec retry et timeout adaptatif
  async _advancedConnectivityTest() {
    const tests = [
      { name: 'Quick test', timeout: 5000 },
      { name: 'Medium test', timeout: 15000 },
      { name: 'Long test', timeout: 30000 }
    ];

    for (const test of tests) {
      try {
        console.log(`[SessionManager] üîç ${test.name}...`);
        
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), test.timeout);
        
        const startTime = Date.now();
        const { data, error } = await supabase.auth.getSession();
        const duration = Date.now() - startTime;
        
        clearTimeout(timeoutId);
        
        if (error) {
          console.warn(`[SessionManager] ‚ö†Ô∏è ${test.name} - Erreur:`, error.message);
          continue; // Essayer le test suivant
        }
        
        // √âvaluer la qualit√© de connexion
        if (duration < 2000) {
          this.connectionQuality = 'good';
        } else if (duration < 5000) {
          this.connectionQuality = 'medium';
        } else {
          this.connectionQuality = 'slow';
        }
        
        console.log(`[SessionManager] ‚úÖ ${test.name} r√©ussi (${duration}ms) - Qualit√©: ${this.connectionQuality}`);
        return true;
        
      } catch (error) {
        console.warn(`[SessionManager] ‚ùå ${test.name} √©chou√©:`, error.message);
        // Continuer avec le test suivant
      }
    }
    
    console.error('[SessionManager] ‚ùå Tous les tests de connectivit√© ont √©chou√©');
    this.connectionQuality = 'poor';
    return false;
  }

  // Initialisation avec gestion de connectivit√© difficile
  async initialize() {
    if (this.isInitialized) {
      console.log('[SessionManager] ‚úÖ D√©j√† initialis√©');
      return true;
    }

    if (this.initializationPromise) {
      console.log('[SessionManager] ‚è≥ Initialisation en cours...');
      return this.initializationPromise;
    }

    this.initializationPromise = this._performOptimizedInitialization();
    return this.initializationPromise;
  }

  async _performOptimizedInitialization() {
    try {
      console.log('[SessionManager] üöÄ Initialisation optimis√©e...');
      
      // Test de connectivit√© avanc√©
      const isConnected = await this._advancedConnectivityTest();
      if (!isConnected) {
        console.error('[SessionManager] ‚ùå Aucune connectivit√©, mode minimal');
        this.isInErrorState = true;
        this.isInitialized = true;
        return false;
      }
      
      // Adapter les timeouts selon la qualit√© de connexion
      this._adaptTimeoutsToConnection();
      
      // Charger la session avec retry
      await this._loadSessionWithRetry();
      
      // D√©marrer le timer adaptatif
      this._startAdaptiveTimer();
      
      this.isInitialized = true;
      document.addEventListener('visibilitychange', this.handleVisibilityChange);
      console.log('[SessionManager] ‚úÖ Initialisation optimis√©e termin√©e');
      return true;
      
    } catch (error) {
      console.error('[SessionManager] ‚ùå Erreur d\'initialisation optimis√©e:', error);
      this.isInErrorState = true;
      this.isInitialized = true;
      return false;
    } finally {
      this.initializationPromise = null;
    }
  }

  // Adapter les timeouts selon la qualit√© de connexion
  _adaptTimeoutsToConnection() {
    switch (this.connectionQuality) {
      case 'good':
        this.SESSION_TIMEOUT = 30 * 1000; // 30s
        this.CHECK_INTERVAL = 5 * 60 * 1000; // 5 min
        break;
      case 'medium':
        this.SESSION_TIMEOUT = 60 * 1000; // 60s
        this.CHECK_INTERVAL = 10 * 60 * 1000; // 10 min
        break;
      case 'slow':
        this.SESSION_TIMEOUT = 90 * 1000; // 90s
        this.CHECK_INTERVAL = 15 * 60 * 1000; // 15 min
        break;
      case 'poor':
        this.SESSION_TIMEOUT = 120 * 1000; // 2 min
        this.CHECK_INTERVAL = 20 * 60 * 1000; // 20 min
        break;
    }
    
    console.log(`[SessionManager] ‚öôÔ∏è Timeouts adapt√©s - Qualit√©: ${this.connectionQuality}, Timeout: ${this.SESSION_TIMEOUT/1000}s`);
  }

  // Chargement de session avec retry intelligent
  async _loadSessionWithRetry() {
    for (let attempt = 1; attempt <= this.MAX_RETRIES; attempt++) {
      try {
        console.log(`[SessionManager] üì• Tentative ${attempt}/${this.MAX_RETRIES} de chargement...`);
        
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), this.SESSION_TIMEOUT);
        
        const { data: { session }, error } = await supabase.auth.getSession();
        clearTimeout(timeoutId);
        
        if (error) {
          throw error;
        }
        
        this.currentSession = session;
        this.consecutiveErrors = 0;
        
        if (session) {
          console.log('[SessionManager] üü¢ Session charg√©e:', session.user?.email);
        } else {
          console.log('[SessionManager] üü° Aucune session');
        }
        
        return session;
        
      } catch (error) {
        console.error(`[SessionManager] ‚ùå Tentative ${attempt} √©chou√©e:`, error.message);
        
        if (attempt < this.MAX_RETRIES) {
          console.log(`[SessionManager] ‚è≥ Attente ${this.RETRY_DELAY/1000}s avant retry...`);
          await new Promise(resolve => setTimeout(resolve, this.RETRY_DELAY));
        } else {
          console.error('[SessionManager] ‚ùå Toutes les tentatives de chargement √©chou√©es');
          this.consecutiveErrors++;
        }
      }
    }
    
    return null;
  }

  // Timer adaptatif selon la qualit√© de connexion
  _startAdaptiveTimer() {
    if (this.refreshTimer) {
      clearInterval(this.refreshTimer);
    }
    
    console.log(`[SessionManager] ‚è∞ Timer adaptatif d√©marr√© (${this.CHECK_INTERVAL/60000} min)`);
    
    this.refreshTimer = setInterval(() => {
      // Ne rien faire si en erreur, pas de session, ou en cours de rafra√Æchissement
      if (this.isInErrorState || !this.currentSession || this.isRefreshing) {
        return;
      }
      
      // V√©rification adaptative
      this._adaptiveSessionCheck();
      
    }, this.CHECK_INTERVAL);
  }

  // V√©rification de session adaptative
  async _adaptiveSessionCheck() {
    try {
      const now = Date.now();
      const expiresAt = this.currentSession.expires_at * 1000;
      const timeUntilExpiry = expiresAt - now;
      
      console.log(`[SessionManager] ‚è±Ô∏è Session expire dans ${Math.round(timeUntilExpiry / 60000)} min`);
      
      // Adapter la marge de rafra√Æchissement selon la qualit√© de connexion
      let adaptiveMargin = this.REFRESH_MARGIN;
      if (this.connectionQuality === 'slow' || this.connectionQuality === 'poor') {
        adaptiveMargin = 20 * 60 * 1000; // 20 min pour connexions lentes
      }
      
      // Rafra√Æchir seulement si vraiment n√©cessaire
      if (timeUntilExpiry < adaptiveMargin) {
        console.log('[SessionManager] üîÑ Rafra√Æchissement adaptatif n√©cessaire');
        await this._adaptiveRefresh();
      }
      
    } catch (error) {
      console.error('[SessionManager] Erreur de v√©rification adaptative:', error);
      this.consecutiveErrors++;
      
      if (this.consecutiveErrors >= this.maxConsecutiveErrors) {
        console.error('[SessionManager] üõë Trop d\'erreurs, mode d√©grad√© activ√©');
        this.isInErrorState = true;
        this._stopTimer();
      }
    }
  }

  // Rafra√Æchissement adaptatif avec retry
  async _adaptiveRefresh() {
    if (this.isRefreshing) {
      console.log('[SessionManager] ‚è∏Ô∏è Rafra√Æchissement d√©j√† en cours');
      return;
    }

    for (let attempt = 1; attempt <= this.MAX_RETRIES; attempt++) {
      try {
        this.isRefreshing = true;
        
        console.log(`[SessionManager] üîÑ Rafra√Æchissement adaptatif ${attempt}/${this.MAX_RETRIES}...`);
        
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), this.SESSION_TIMEOUT);
        
        const { data: { session }, error } = await supabase.auth.refreshSession();
        clearTimeout(timeoutId);
        
        if (error) {
          throw error;
        }
        
        if (session) {
          this.currentSession = session;
          this.consecutiveErrors = 0;
          console.log('[SessionManager] ‚úÖ Session rafra√Æchie avec succ√®s');
          this.notifyListeners('session_refreshed', session);
          return session;
        }
        
      } catch (error) {
        console.error(`[SessionManager] ‚ùå Rafra√Æchissement ${attempt} √©chou√©:`, error.message);
        
        if (attempt < this.MAX_RETRIES) {
          console.log(`[SessionManager] ‚è≥ Retry dans ${this.RETRY_DELAY/1000}s...`);
          await new Promise(resolve => setTimeout(resolve, this.RETRY_DELAY));
        } else {
          this.consecutiveErrors++;
        }
      } finally {
        if (attempt === this.MAX_RETRIES) {
          this.isRefreshing = false;
        }
      }
    }
  }

  // Arr√™ter le timer
  _stopTimer() {
    if (this.refreshTimer) {
      clearInterval(this.refreshTimer);
      this.refreshTimer = null;
      console.log('[SessionManager] Timer arr√™t√©');
    }
  }

  // M√©thodes publiques
  getCurrentSession() {
    return this.currentSession;
  }

  isSessionValid() {
    if (!this.currentSession) return false;
    const now = Date.now();
    const expiresAt = this.currentSession.expires_at * 1000;
    return expiresAt > now;
  }

  // Wrapper optimis√© pour op√©rations
  async withValidSession(operation) {
    if (this.isInErrorState) {
      console.warn('[SessionManager] ‚ö†Ô∏è Mode d√©grad√© - op√©ration √† risque');
      // Ne pas bloquer compl√®tement, mais avertir
    }

    try {
      if (!this.isSessionValid() && !this.isRefreshing) {
        console.log('[SessionManager] Session invalide, rafra√Æchissement adaptatif...');
        await this._adaptiveRefresh();
      }
      
      if (!this.currentSession) {
        throw new Error('Aucune session disponible');
      }
      
      return await operation(this.currentSession);
      
    } catch (error) {
      console.error('[SessionManager] Erreur dans withValidSession:', error);
      throw error;
    }
  }

  // Diagnostic de connectivit√©
  async diagnoseConnectivity() {
    console.log('[SessionManager] üîç === DIAGNOSTIC DE CONNECTIVIT√â ===');
    
    const startTime = Date.now();
    const isConnected = await this._advancedConnectivityTest();
    const totalTime = Date.now() - startTime;
    
    console.log('[SessionManager] üìä R√©sultats du diagnostic:');
    console.log(`- Connectivit√©: ${isConnected ? '‚úÖ OK' : '‚ùå √âCHOUE'}`);
    console.log(`- Qualit√©: ${this.connectionQuality}`);
    console.log(`- Temps total: ${totalTime}ms`);
    console.log(`- Erreurs cons√©cutives: ${this.consecutiveErrors}`);
    console.log(`- √âtat d'erreur: ${this.isInErrorState ? '‚ùå OUI' : '‚úÖ NON'}`);
    
    return {
      connected: isConnected,
      quality: this.connectionQuality,
      totalTime,
      consecutiveErrors: this.consecutiveErrors,
      errorState: this.isInErrorState
    };
  }

  // Reset du mode d√©grad√©
  async resetDegradedMode() {
    console.log('[SessionManager] üîÑ Reset du mode d√©grad√©...');
    this.isInErrorState = false;
    this.consecutiveErrors = 0;
    
    // Re-tester la connectivit√©
    await this._advancedConnectivityTest();
    this._adaptTimeoutsToConnection();
    
    // Red√©marrer le timer si n√©cessaire
    if (!this.refreshTimer && this.currentSession) {
      this._startAdaptiveTimer();
    }
    
    console.log('[SessionManager] ‚úÖ Mode d√©grad√© reset√©');
  }

  // Gestion des √©couteurs
  addListener(callback) {
    this.listeners.add(callback);
    return () => this.listeners.delete(callback);
  }

  notifyListeners(event, data) {
    this.listeners.forEach(callback => {
      try {
        callback(event, data);
      } catch (error) {
        console.error('[SessionManager] Erreur dans √©couteur:', error);
      }
    });
  }

  _handleVisibilityChange() {
    if (document.visibilityState === 'visible') {
      supabase.auth.getSession().then(({ data: { session } }) => {
        if (!session) {
          this.currentSession = null;
          this.notifyListeners('session_expired');
        } else {
          this.currentSession = session;
          this.notifyListeners('session_verified', session);
        }
      }).catch((error) => {
        console.error('[SessionManager] Erreur v√©rification visibilit√©:', error);
      });
    }
  }

  // Nettoyage
  cleanup() {
    console.log('[SessionManager] üßπ Nettoyage optimis√©');
    this._stopTimer();
    document.removeEventListener('visibilitychange', this.handleVisibilityChange);
    this.listeners.clear();
    this.isInitialized = false;
    this.isInErrorState = false;
    this.initializationPromise = null;
  }

  // M√âTHODES DE COMPATIBILIT√â
  startAutoRefresh() { return this.initialize(); }
  stopAutoRefresh() { return this.cleanup(); }
  async refreshSession() { return this._adaptiveRefresh(); }
  async forceRefresh() { return this._adaptiveRefresh(); }
  async refreshIfNeeded() { return this._adaptiveSessionCheck(); }
}

SessionManager.instance = null;
export const sessionManager = new SessionManager();
export default sessionManager;
